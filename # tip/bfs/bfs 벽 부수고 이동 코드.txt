'''
해당 문제

백준
14923
2206
14442

'''

from collections import deque

import sys
def input(): return sys.stdin.readline().strip()


dy = [-1, 1, 0, 0]
dx = [0, 0, -1, 1]


def bfs():
    # 큐에 시작점 넣기 및 방문 처리
    q = deque()
    q.append((0, 0, 0))
    visited[0][0][0] = 1

    while q:

        z, y, x = q.popleft()

        if y == n - 1 and x == m - 1:
            return visited[z][y][x]

        for i in range(4):

            ny, nx = y + dy[i], x + dx[i]

            if 0 <= ny <= n - 1 and 0 <= nx <= m - 1 and \
                    visited[z][ny][nx] == 0:

                # 큐에 dis + 1을 넣는 대신 visited 배열에 거리값을 저장
                # 큐에 dis + 1을 넣으면 시간 초과 발생
                if graph[ny][nx] == 0 and visited[z][ny][nx] == 0:
                    q.append((z, ny, nx))
                    visited[z][ny][nx] = visited[z][y][x] + 1

                # 벽이 있는 경우 벽을 부쉈을 때 범위 만족 및 다음 점에 방문하였는지를 검사
                elif graph[ny][nx] == 1 and 0 <= z + 1 <= wall and visited[z + 1][ny][nx] == 0:
                    q.append((z + 1, ny, nx))
                    visited[z + 1][ny][nx] = visited[z][y][x] + 1

    return -1


n, m, wall = map(int, input().split())
graph = [list(map(int, input())) for _ in range(n)]

visited = [[[0] * m for _ in range(n)] for _ in range(wall + 1)]

print(bfs())