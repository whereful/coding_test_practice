공통 부분 문자열
- 연속됨
- dp[i][j] = s[:i +1], p[j +1]의 공통 부분 문자열의 길이
- 공통 부분 문자열은 s[:i +1], p[:j +1]의 끝에 집중적으로 위치
- dp[n][m]이 공통 부분 문자열의 최대 길이를 보장하지 못함

- ABRACADABRA과 ECADADABRBCRDARA의 공통 부분 문자열 : RA
- ABRACADABR과 ECADADABR의 공통 부분 문자열 : ADABR

코드
ans = 0 # 가능한 모든 공통 부분 문자열 중 최대 길이
for i in range(1, ls +1):
    for j in range(1, lp +1):
        if s[i - 1] == p[j - 1]:
            # 끝이 일치하면
            # 문자열을 붙이기 전의 공통 부분 문자열의 길이에 1을 더함
            dp[i][j] = dp[i - 1][j - 1] + 1
            ans = max(ans, dp[i][j])


최장 공통 부분 수열
- 연속되지 않음
- dp[i][j] = s[:i +1], p[:j +1]의 최장 공통 부분 수열의 길이
- 최장 공통 부분 수열은 s[:i +1], p[:j +1] 내부에 분할되어 분포
- dp[n][m]이 공통 부분 문자열들 중 최대 길이를 보장함

- ACAYKP과 CAPCAK의 최장 공통 부분 수열 : ACAK
- ACAYK과 CAPCAK의 최장 공통 부분 수열 : ACAK
- 끝이 일치하지 않아도 됨

코드

for i in range(1, ls +1):
    for j in range(1, lp +1):
        # 끝이 일치하면 그 전의 최대 길이  + 1
        # dp[i][j]가 지금까지 언급된 dp[][] 중 최대임을 보장하므로
        # ans를 사용할 필요가 없음
        if s[i - 1] == p[j - 1]:
            dp[i][j] = dp[i - 1][j - 1] + 1
        else:
        # 끝이 일치하지 않으면 + 1을 적용하면 안 됨
        # 기존의 최대값을 따라 가야 함
        # 기존의 최대값은 dp[i][j]가 생성되기 전에 가장 최근에 만들어진
        # dp[i - 1][j]과 dp[i][j - 1] 중 최대값임
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
